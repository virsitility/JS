
// ===========================
// Rasterize Smart Object
// ===========================
function script5() {
	app.bringToFront();
	activeDocument.suspendHistory('Raster SOs', 'main()');
	function main() {
		if (!documents.length)
			return;
		selectAllLayers();
		var selectedLayers = getSelectedLayersIdx();
		for (var a in selectedLayers) {
			if (hasSmartObject(Number(selectedLayers[a]))) {
				makeActiveByIndex(Number(selectedLayers[a]), false);
				executeAction(stringIDToTypeID("rasterizePlaced"), undefined, DialogModes.NO);
			}
		}
	}
	function hasSmartObject(idx) {
		var ref = new ActionReference();
		ref.putProperty(charIDToTypeID("Prpr"), stringIDToTypeID("smartObject"));
		ref.putIndex(charIDToTypeID("Lyr "), idx);
		var desc = executeActionGet(ref);
		if (desc.hasKey(stringIDToTypeID('smartObject')))
			return true;
		else
			return false;
	}
	function makeActiveByIndex(idx, visible) {
		var desc = new ActionDescriptor();
		var ref = new ActionReference();
		ref.putIndex(charIDToTypeID("Lyr "), idx)
		desc.putReference(charIDToTypeID("null"), ref);
		desc.putBoolean(charIDToTypeID("MkVs"), visible);
		executeAction(charIDToTypeID("slct"), desc, DialogModes.NO);
	};
	function getSelectedLayersIdx() {
		var selectedLayers = new Array;
		var ref = new ActionReference();
		ref.putEnumerated(charIDToTypeID("Dcmn"), charIDToTypeID("Ordn"), charIDToTypeID("Trgt"));
		var desc = executeActionGet(ref);
		if (desc.hasKey(stringIDToTypeID('targetLayers'))) {
			desc = desc.getList(stringIDToTypeID('targetLayers'));
			var c = desc.count
				var selectedLayers = new Array();
			for (var i = 0; i < c; i++) {
				try {
					activeDocument.backgroundLayer;
					selectedLayers.push(desc.getReference(i).getIndex());
				} catch (e) {
					selectedLayers.push(desc.getReference(i).getIndex() + 1);
				}
			}
		} else {
			var ref = new ActionReference();
			ref.putProperty(charIDToTypeID("Prpr"), charIDToTypeID("ItmI"));
			ref.putEnumerated(charIDToTypeID("Lyr "), charIDToTypeID("Ordn"), charIDToTypeID("Trgt"));
			try {
				activeDocument.backgroundLayer;
				selectedLayers.push(executeActionGet(ref).getInteger(charIDToTypeID("ItmI")) - 1);
			} catch (e) {
				selectedLayers.push(executeActionGet(ref).getInteger(charIDToTypeID("ItmI")));
			}
		}
		return selectedLayers;
	};
	function selectAllLayers() {
		var desc29 = new ActionDescriptor();
		var ref23 = new ActionReference();
		ref23.putEnumerated(charIDToTypeID('Lyr '), charIDToTypeID('Ordn'), charIDToTypeID('Trgt'));
		desc29.putReference(charIDToTypeID('null'), ref23);
		executeAction(stringIDToTypeID('selectAllLayers'), desc29, DialogModes.NO);
	}
}

// ===========================
// Convert to Smart Object
// ===========================
function script7() {
	 # target photoshop
	var debug = false;
	// Convert Selected Layers to Individual Smart Objects

	var Layer = function () {}
	var LayerSet = function () {}
	var ArtLayer = function () {}
	var Document = function () {}

	Document.prototype.convertToSmartObject = function (layerRef) {

		this.activeLayer = layerRef;
		try {
			executeAction(stringIDToTypeID("newPlacedLayer"), undefined, DialogModes.NO);
		} catch (e) {
			log(e)
		}

	}

	var doc = app.activeDocument;

	doc.suspendHistory("Convert Selected Layers to Individual Smart Objects", "main()");

	function main() {

		var currentLayer = doc.activeLayer; // remember the selected layer
		var currentVisible = currentLayer.visible; // remember the visibility setting of the selected layer
		var currentSelectedLayers = getSelectedLayers(); // remember the selected layers

		if (currentSelectedLayers.length < 1) {
			var currentLayer = doc.activeLayer; // remember the selected layers
		}

		// create an array and store all the art layers states
		var currentState = new Array;
		try {
			getCurrentStateAlteringAsNeeded(doc, currentState);
		} catch (e) { ; // do nothing
		}

		// Do some voodoo on the layer selection incase no layer is selected or multiple layers are selected
		try {
			touchUpLayerSelection()
		} catch (e) { ; // do nothing
		}

		// create an array and store all the art layers in that array
		var allArtLayers = new Array;
		var allVisibleInfo = new Array;
		getAllArtLayers(doc, allArtLayers, allVisibleInfo);

		// Walk the layer stack


		if (currentSelectedLayers.length < 1) {
			try {
				doc.convertToSmartObject(currentLayer);
			} catch (e) {
				log(e)
			}
		}

		var decrement = doc.artLayers[activeDocument.artLayers.length - 1].isBackgroundLayer ? 0 : 1;

		for (var i = 0; i < currentSelectedLayers.length; i++) {
			try {
				doc.convertToSmartObject(allArtLayers[allArtLayers.length - 1 - currentSelectedLayers[i] + decrement]);

			} catch (e) {
				log(e)
			}
		}

		// restore the current state of the layers
		try {
			setCurrentState(currentState);
		} catch (e) { ; // do nothing
		}

		if (currentSelectedLayers.length > 1) {
			try {
				setSelectedLayers(currentSelectedLayers);
			} catch (e) { ; // do nothing
			}
		}

		// restore the selected layer
		try {
			doc.activeLayer = currentLayer;
		} catch (e) { ; // do nothing
		}

		// restore the visibility setting of the original layer
		try {
			currentLayer.visible = currentVisible;
		} catch (e) { ; // do nothing
		}

	}

	///////////////////////////////////////////////////////////////////////////////
	// Function: touchUpLayerSelection
	// Usage: deal with odd layer selections of no layer selected or multiple layers
	// Input: <none> Must have an open document
	// Return: <none>
	///////////////////////////////////////////////////////////////////////////////
	function touchUpLayerSelection() {
		try {
			// Select all Layers
			var idselectAllLayers = stringIDToTypeID("selectAllLayers");
			var desc252 = new ActionDescriptor();
			var idnull = charIDToTypeID("null");
			var ref174 = new ActionReference();
			var idLyr = charIDToTypeID("Lyr ");
			var idOrdn = charIDToTypeID("Ordn");
			var idTrgt = charIDToTypeID("Trgt");
			ref174.putEnumerated(idLyr, idOrdn, idTrgt);
			desc252.putReference(idnull, ref174);
			executeAction(idselectAllLayers, desc252, DialogModes.NO);
			// Select the previous layer
			var idslct = charIDToTypeID("slct");
			var desc209 = new ActionDescriptor();
			var idnull = charIDToTypeID("null");
			var ref140 = new ActionReference();
			var idLyr = charIDToTypeID("Lyr ");
			var idOrdn = charIDToTypeID("Ordn");
			var idBack = charIDToTypeID("Back");
			ref140.putEnumerated(idLyr, idOrdn, idBack);
			desc209.putReference(idnull, ref140);
			var idMkVs = charIDToTypeID("MkVs");
			desc209.putBoolean(idMkVs, false);
			executeAction(idslct, desc209, DialogModes.NO);
		} catch (e) { ; // do nothing
		}
	}

	///////////////////////////////////////////////////////////////////////////////
	// Function: getAllArtLayers
	// Usage: get a reference to all artLayers in
	// the document, does recursion into groups
	// Input: obj, current object, document or layerSet
	// layersArray, place to put the resulting artLayers,
	// layersArray is both input and output
	// Return: <none>
	///////////////////////////////////////////////////////////////////////////////
	function getAllArtLayers(obj, layersArray, visibleArray) {
		for (var i = 0; i < obj.artLayers.length; i++) {
			layersArray.push(obj.artLayers[i]);
			//alert(obj.artLayers[i].name);
			visibleArray.push(obj.artLayers[i].visible);
		}
		for (var i = 0; i < obj.layerSets.length; i++) {
			getAllArtLayers(obj.layerSets[i], layersArray, visibleArray); // recursive call
		}
	}

	///////////////////////////////////////////////////////////////////////////////
	// Function: getSelectedLayers
	// Usage: creates and array of the currently selected layers
	// Input: <none> Must have an open document
	// Return: Array selectedLayers
	///////////////////////////////////////////////////////////////////////////////
	function getSelectedLayers() {
		var selectedLayers = [];
		try {
			var backGroundCounter = activeDocument.artLayers[activeDocument.artLayers.length - 1].isBackgroundLayer ? 0 : 1;
			var ref = new ActionReference();
			var keyTargetLayers = app.stringIDToTypeID('targetLayers');
			ref.putProperty(app.charIDToTypeID('Prpr'), keyTargetLayers);
			ref.putEnumerated(app.charIDToTypeID('Dcmn'), app.charIDToTypeID('Ordn'), app.charIDToTypeID('Trgt'));
			var desc = executeActionGet(ref);
			if (desc.hasKey(keyTargetLayers)) {
				var layersList = desc.getList(keyTargetLayers);
				for (var i = 0; i < layersList.count; i++) {
					var listRef = layersList.getReference(i);
					selectedLayers.push(listRef.getIndex() + backGroundCounter);
				}
			}
		} catch (e) { ; // do nothing
		}
		return selectedLayers;
	}

	///////////////////////////////////////////////////////////////////////////////
	// Function: setSelectedLayers
	// Usage: Selects an array of layers
	// Input:  Array selectedLayers
	// Return: <none>
	///////////////////////////////////////////////////////////////////////////////
	function setSelectedLayers(layerIndexesOrNames) {
		// first select the first one
		setSelectedLayer(layerIndexesOrNames[0]);

		// then add to the selection
		for (var i = 1; i < layerIndexesOrNames.length; i++) {
			addSelectedLayer(layerIndexesOrNames[i]);
		}
	}

	///////////////////////////////////////////////////////////////////////////////
	// Function: setSelectedLayer
	// Usage: Selects the first layer
	// Input:  Array selectedLayers
	// Return: <none>
	///////////////////////////////////////////////////////////////////////////////
	function setSelectedLayer(layerIndexOrName) {
		try {
			var id239 = charIDToTypeID("slct");
			var desc45 = new ActionDescriptor();
			var id240 = charIDToTypeID("null");
			var ref43 = new ActionReference();
			var id241 = charIDToTypeID("Lyr ");
			if (typeof layerIndexOrName == "number") {
				ref43.putIndex(id241, layerIndexOrName);
			} else {
				ref43.putName(id241, layerIndexOrName);
			}
			desc45.putReference(id240, ref43);
			var id242 = charIDToTypeID("MkVs");
			desc45.putBoolean(id242, false);
			executeAction(id239, desc45, DialogModes.NO);
		} catch (e) {
			alert(e + ":" + e.line); // do nothing
		}
	}

	///////////////////////////////////////////////////////////////////////////////
	// Function: addSelectedLayer
	// Usage: adds the rest of the layers in the array to the first layer
	// Input:  Array selectedLayers
	// Return: <none>
	///////////////////////////////////////////////////////////////////////////////
	function addSelectedLayer(layerIndexOrName) {
		try {
			var id243 = charIDToTypeID("slct");
			var desc46 = new ActionDescriptor();
			var id244 = charIDToTypeID("null");
			var ref44 = new ActionReference();
			var id245 = charIDToTypeID("Lyr ");
			if (typeof layerIndexOrName == "number") {
				ref44.putIndex(id245, layerIndexOrName);
			} else {
				ref44.putName(id245, layerIndexOrName);
			}
			desc46.putReference(id244, ref44);
			var id246 = stringIDToTypeID("selectionModifier");
			var id247 = stringIDToTypeID("selectionModifierType");
			var id248 = stringIDToTypeID("addToSelection");
			desc46.putEnumerated(id246, id247, id248);
			var id249 = charIDToTypeID("MkVs");
			desc46.putBoolean(id249, false);
			executeAction(id243, desc46, DialogModes.NO);
		} catch (e) {
			alert(e + ":" + e.line); // do nothing
		}
	}

	///////////////////////////////////////////////////////////////////////////////
	// Function:  getCurrentStateAlteringAsNeeded
	// Usage: capture the current state of the layers in an array
	// Input: <none> Must have an open document
	// Return: <none>
	///////////////////////////////////////////////////////////////////////////////
	function getCurrentStateAlteringAsNeeded(obj, stateArray) {
		for (var i = 0; i < obj.artLayers.length; i++) {
			var oState = new ObjectState(obj.artLayers[i]);
			if (oState.fixState(obj.artLayers[i], obj.artLayers[i].visible, true)) {
				obj.artLayers[i].visible = true;
			}
			if (!obj.artLayers[i].isBackgroundLayer) {
				if (oState.fixState(obj.artLayers[i], obj.artLayers[i].allLocked, false)) {
					obj.artLayers[i].allLocked = false;
				}
				if (oState.fixState(obj.artLayers[i], obj.artLayers[i].pixelsLocked, false)) {
					obj.artLayers[i].pixelsLocked = false;
				}
				if (oState.fixState(obj.artLayers[i], obj.artLayers[i].positionLocked, false)) {
					obj.artLayers[i].positionLocked = false;
				}
				if (oState.fixState(obj.artLayers[i], obj.artLayers[i].transparentPixelsLocked, false)) {
					obj.artLayers[i].transparentPixelsLocked = false;
				}
			}
			stateArray.push(oState);
		}
		for (var i = 0; i < obj.layerSets.length; i++) {
			var oState = new ObjectState(obj.layerSets[i]);
			if (oState.fixState(obj.layerSets[i], obj.layerSets[i].visible, true)) {
				obj.layerSets[i].visible = true;
			}
			if (oState.fixState(obj.layerSets[i], obj.layerSets[i].allLocked, false)) {
				obj.layerSets[i].allLocked = false;
			}
			stateArray.push(oState);
			getCurrentStateAlteringAsNeeded(obj.layerSets[i], stateArray); // recursive call
		}
	}

	///////////////////////////////////////////////////////////////////////////////
	// Function:  setCurrentState
	// Usage: set the state of the layers back to what what captured
	// Input: <none> Must have an open document
	// Return: <none>
	///////////////////////////////////////////////////////////////////////////////
	function setCurrentState(stateArray) {
		for (var i = 0; i < stateArray.length; i++) {
			try {
				if (stateArray[i].altered) {
					app.refresh();
					activeDocument.activeLayer = stateArray[i].layer;
					stateArray[i].layer.allLocked = stateArray[i].allLocked;
					if (!stateArray[i].allLocked) {
						stateArray[i].layer.pixelsLocked = stateArray[i].pixelsLocked;
						stateArray[i].layer.positionLocked = stateArray[i].positionLocked;
						stateArray[i].layer.transparentPixelsLocked = stateArray[i].transparentPixelsLocked;
					}
					stateArray[i].layer.visible = stateArray[i].visible;
				}
			} catch (e) {
				alert(e + ":" + e.line);
			}
		}
	}

	///////////////////////////////////////////////////////////////////////////////
	// Function:  ObjectState
	// Usage:
	// Input: <none> Must have an open document
	// Return: <none>
	///////////////////////////////////////////////////////////////////////////////
	function ObjectState(inObject) {
		this.layer = inObject;
		this.visible = inObject.visible;
		this.allLocked = inObject.allLocked;
		this.pixelsLocked = inObject.pixelsLocked;
		this.positionLocked = inObject.positionLocked;
		this.transparentPixelsLocked = inObject.transparentPixelsLocked;
		this.altered = false;
		this.current = false;
		this.fixState = function (inObject, inState, wantState) {
			var wasAltered = false;
			if (inState != wantState) {
				if (this.current == false) {
					activeDocument.activeLayer = inObject;
					this.altered = true;
					this.current = true;
				}
				wasAltered = true;
			}
			return wasAltered;
		}
	}

	function log(msg) {
		if (debug)
			$.writeln(msg.toSource());
	}
}
